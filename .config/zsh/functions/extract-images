#!/bin/zsh
# Example function that extracts all images from an XML/HTML file.

# Reset script-relevant options to default, but set EXTENDED_GLOB.
emulate -L zsh -o extendedglob

# Declare which field separators to use for ${=...}, below.
# local sets the scope of the variable to this function and its descendendants.
# +h preserves the "specialness" of $IFS for our local version of it.
local +h IFS='<>"()'

# < $1 Load the contents of file $1 and $( ... ) expand it to a string, "..."
# ensuring all whitespace, incl. newlines, is kept as is, then ${=...} split
# it on the given separators and `reply=( ... )` place the resulting strings
# into an array.
reply=( ${="$( < $1 )"} )

# [@] For each string, (M) keep ## only the longest substring that starts at
# the beginning of the string and `*.(gif|jpg|png|svg)` ends with .gif, .jpg,
# .png or .svg. If there is no such substring, discard the entire string (since
# we did not wrap the expression in "double quotes").
reply=( ${(M)reply[@]##*.(gif|jpg|png|svg)} )
# (M) stands for "Match".

# [@] For each string, remove ` #` all spaces ## from the beginning of the
# string. Then, (u) discard all duplicates and (i) sort case-insensitively.
reply=( ${(ui)reply[@]## #} )
# (u) stands for "unique". (i) stands for "insensitive".
